//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DNEScrypt.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DNEScryptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, True=8, False=9, 
		Var=10, Equals=11, Underscore=12, Add=13, Increment=14, Minus=15, Decrement=16, 
		Multiply=17, Divide=18, LeftParenthesis=19, RightParenthesis=20, Dot=21, 
		And=22, Or=23, Not=24, DivideEquals=25, SubEquals=26, MultiplyEquals=27, 
		AddEquals=28, DoubleEquals=29, NotEquals=30, LessOrEqual=31, GreaterOrEqual=32, 
		GreaterThan=33, LessThan=34, Null=35, Id=36, Number=37, String=38, WhiteSpace=39;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_assignment = 3, 
		RULE_increment = 4, RULE_bincrement = 5, RULE_block = 6, RULE_ifStmt = 7, 
		RULE_elseifStmt = 8, RULE_elseStmt = 9, RULE_expression = 10, RULE_object = 11, 
		RULE_objectPair = 12, RULE_objectGet = 13;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "assignment", "increment", "bincrement", 
		"block", "ifStmt", "elseifStmt", "elseStmt", "expression", "object", "objectPair", 
		"objectGet"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'if'", "'else'", "','", "':'", "'true'", "'false'", 
		"'var'", "'='", "'_'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'('", 
		"')'", "'.'", "'&&'", "'||'", "'!'", "'/='", "'-='", "'*='", "'+='", "'=='", 
		"'!='", "'<='", "'>='", "'>'", "'<'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "True", "False", "Var", 
		"Equals", "Underscore", "Add", "Increment", "Minus", "Decrement", "Multiply", 
		"Divide", "LeftParenthesis", "RightParenthesis", "Dot", "And", "Or", "Not", 
		"DivideEquals", "SubEquals", "MultiplyEquals", "AddEquals", "DoubleEquals", 
		"NotEquals", "LessOrEqual", "GreaterOrEqual", "GreaterThan", "LessThan", 
		"Null", "Id", "Number", "String", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DNEScrypt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DNEScryptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DNEScryptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DNEScryptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
				{
				State = 30;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 28; statement();
					}
					break;
				case 2:
					{
					State = 29; block();
					}
					break;
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public BincrementContext bincrement() {
			return GetRuleContext<BincrementContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case Increment:
			case Decrement:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 35; declaration();
					}
					break;
				case 2:
					{
					State = 36; assignment();
					}
					break;
				case 3:
					{
					State = 37; increment();
					}
					break;
				case 4:
					{
					State = 38; bincrement();
					}
					break;
				}
				State = 41; Match(T__0);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; ifStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DNEScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ObjectGetContext objectGet() {
			return GetRuleContext<ObjectGetContext>(0);
		}
		public ITerminalNode Equals() { return GetToken(DNEScryptParser.Equals, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(Var);
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 47; Match(Id);
				}
				break;
			case 2:
				{
				State = 48; objectGet();
				}
				break;
			}
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 51; Match(Equals);
				State = 54;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case True:
				case False:
				case Increment:
				case Minus:
				case Decrement:
				case LeftParenthesis:
				case Not:
				case Null:
				case Id:
				case Number:
				case String:
					{
					State = 52; expression(0);
					}
					break;
				case T__1:
					{
					State = 53; @object();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Equals() { return GetToken(DNEScryptParser.Equals, 0); }
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ObjectGetContext objectGet() {
			return GetRuleContext<ObjectGetContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ITerminalNode DivideEquals() { return GetToken(DNEScryptParser.DivideEquals, 0); }
		public ITerminalNode MultiplyEquals() { return GetToken(DNEScryptParser.MultiplyEquals, 0); }
		public ITerminalNode AddEquals() { return GetToken(DNEScryptParser.AddEquals, 0); }
		public ITerminalNode SubEquals() { return GetToken(DNEScryptParser.SubEquals, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 58; Match(Id);
					}
					break;
				case 2:
					{
					State = 59; objectGet();
					}
					break;
				}
				State = 62; Match(Equals);
				State = 65;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case True:
				case False:
				case Increment:
				case Minus:
				case Decrement:
				case LeftParenthesis:
				case Not:
				case Null:
				case Id:
				case Number:
				case String:
					{
					State = 63; expression(0);
					}
					break;
				case T__1:
					{
					State = 64; @object();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; Match(Id);
				State = 68; Match(Equals);
				State = 69; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; Match(Id);
				State = 71; Match(DivideEquals);
				State = 72; expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73; Match(Id);
				State = 74; Match(MultiplyEquals);
				State = 75; expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76; Match(Id);
				State = 77; Match(AddEquals);
				State = 78; expression(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 79; Match(Id);
				State = 80; Match(SubEquals);
				State = 81; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode Increment() { return GetToken(DNEScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(DNEScryptParser.Decrement, 0); }
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 8, RULE_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(Id);
			State = 85;
			_la = TokenStream.LA(1);
			if ( !(_la==Increment || _la==Decrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BincrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode Increment() { return GetToken(DNEScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(DNEScryptParser.Decrement, 0); }
		public BincrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bincrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBincrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BincrementContext bincrement() {
		BincrementContext _localctx = new BincrementContext(Context, State);
		EnterRule(_localctx, 10, RULE_bincrement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = TokenStream.LA(1);
			if ( !(_la==Increment || _la==Decrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 88; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		int _la;
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; Match(T__1);
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
					{
					{
					State = 91; statement();
					}
					}
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 97; Match(T__2);
				}
				break;
			case T__3:
			case Var:
			case Increment:
			case Decrement:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(DNEScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(DNEScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifStmtContext[] elseifStmt() {
			return GetRuleContexts<ElseifStmtContext>();
		}
		public ElseifStmtContext elseifStmt(int i) {
			return GetRuleContext<ElseifStmtContext>(i);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__3);
			State = 102; Match(LeftParenthesis);
			State = 103; expression(0);
			State = 104; Match(RightParenthesis);
			State = 105; block();
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 106; elseifStmt();
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 112; elseStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(DNEScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(DNEScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStmtContext elseifStmt() {
		ElseifStmtContext _localctx = new ElseifStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T__4);
			State = 116; Match(LeftParenthesis);
			State = 117; expression(0);
			State = 118; Match(RightParenthesis);
			State = 119; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(T__4);
			State = 122; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(DNEScryptParser.Number, 0); }
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode True() { return GetToken(DNEScryptParser.True, 0); }
		public ITerminalNode False() { return GetToken(DNEScryptParser.False, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(DNEScryptParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(DNEScryptParser.RightParenthesis, 0); }
		public ITerminalNode Minus() { return GetToken(DNEScryptParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(DNEScryptParser.Not, 0); }
		public BincrementContext bincrement() {
			return GetRuleContext<BincrementContext>(0);
		}
		public ITerminalNode Increment() { return GetToken(DNEScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(DNEScryptParser.Decrement, 0); }
		public ITerminalNode Null() { return GetToken(DNEScryptParser.Null, 0); }
		public ITerminalNode String() { return GetToken(DNEScryptParser.String, 0); }
		public ObjectGetContext objectGet() {
			return GetRuleContext<ObjectGetContext>(0);
		}
		public ITerminalNode Multiply() { return GetToken(DNEScryptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(DNEScryptParser.Divide, 0); }
		public ITerminalNode Add() { return GetToken(DNEScryptParser.Add, 0); }
		public ITerminalNode LessThan() { return GetToken(DNEScryptParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(DNEScryptParser.GreaterThan, 0); }
		public ITerminalNode DoubleEquals() { return GetToken(DNEScryptParser.DoubleEquals, 0); }
		public ITerminalNode NotEquals() { return GetToken(DNEScryptParser.NotEquals, 0); }
		public ITerminalNode LessOrEqual() { return GetToken(DNEScryptParser.LessOrEqual, 0); }
		public ITerminalNode GreaterOrEqual() { return GetToken(DNEScryptParser.GreaterOrEqual, 0); }
		public ITerminalNode MultiplyEquals() { return GetToken(DNEScryptParser.MultiplyEquals, 0); }
		public ITerminalNode DivideEquals() { return GetToken(DNEScryptParser.DivideEquals, 0); }
		public ITerminalNode And() { return GetToken(DNEScryptParser.And, 0); }
		public ITerminalNode Or() { return GetToken(DNEScryptParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 125; Match(Number);
				}
				break;
			case 2:
				{
				State = 126; Match(Id);
				}
				break;
			case 3:
				{
				State = 127; Match(True);
				}
				break;
			case 4:
				{
				State = 128; Match(False);
				}
				break;
			case 5:
				{
				State = 129; Match(LeftParenthesis);
				State = 130; expression(0);
				State = 131; Match(RightParenthesis);
				}
				break;
			case 6:
				{
				State = 133; Match(Minus);
				State = 134; expression(13);
				}
				break;
			case 7:
				{
				State = 135; Match(Not);
				State = 136; expression(12);
				}
				break;
			case 8:
				{
				State = 137; bincrement();
				}
				break;
			case 9:
				{
				State = 138; Match(Id);
				State = 139;
				_la = TokenStream.LA(1);
				if ( !(_la==Increment || _la==Decrement) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				{
				State = 140; Match(Null);
				}
				break;
			case 11:
				{
				State = 141; Match(String);
				}
				break;
			case 12:
				{
				State = 142; objectGet();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 163;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 146;
						_la = TokenStream.LA(1);
						if ( !(_la==Multiply || _la==Divide) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 147; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 149;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 150; expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 152;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DoubleEquals) | (1L << NotEquals) | (1L << LessOrEqual) | (1L << GreaterOrEqual) | (1L << GreaterThan) | (1L << LessThan))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 153; expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 155;
						_la = TokenStream.LA(1);
						if ( !(_la==DivideEquals || _la==MultiplyEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 156; expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 157;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 158; Match(And);
						State = 159; expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 160;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 161; Match(Or);
						State = 162; expression(7);
						}
						break;
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ObjectPairContext[] objectPair() {
			return GetRuleContexts<ObjectPairContext>();
		}
		public ObjectPairContext objectPair(int i) {
			return GetRuleContext<ObjectPairContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 22, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(T__1);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 169; objectPair();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 170; Match(T__5);
					}
				}

				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPairContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectPair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPairContext objectPair() {
		ObjectPairContext _localctx = new ObjectPairContext(Context, State);
		EnterRule(_localctx, 24, RULE_objectPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(Id);
			State = 181; Match(T__6);
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Increment:
			case Minus:
			case Decrement:
			case LeftParenthesis:
			case Not:
			case Null:
			case Id:
			case Number:
			case String:
				{
				State = 182; expression(0);
				}
				break;
			case T__1:
				{
				State = 183; @object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectGetContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(DNEScryptParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(DNEScryptParser.Id, i);
		}
		public ITerminalNode[] Dot() { return GetTokens(DNEScryptParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(DNEScryptParser.Dot, i);
		}
		public ObjectGetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectGet; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectGetContext objectGet() {
		ObjectGetContext _localctx = new ObjectGetContext(Context, State);
		EnterRule(_localctx, 26, RULE_objectGet);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(Id);
			State = 189;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 187; Match(Dot);
					State = 188; Match(Id);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\xC4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'!', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '$', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '*', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '/', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x34', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x39', 
		'\n', '\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '?', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'U', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', '_', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x62', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x66', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', 'n', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'q', '\v', '\t', '\x3', '\t', '\x5', '\t', 't', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x92', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xA6', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xA9', '\v', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xAE', '\n', '\r', '\a', '\r', '\xB0', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\xB3', '\v', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xBB', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x6', '\xF', '\xC0', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\xC1', 
		'\x3', '\xF', '\x2', '\x3', '\x16', '\x10', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x2', '\a', '\x4', '\x2', '\x10', '\x10', '\x12', '\x12', '\x3', '\x2', 
		'\x13', '\x14', '\x4', '\x2', '\xF', '\xF', '\x11', '\x11', '\x3', '\x2', 
		'\x1F', '$', '\x4', '\x2', '\x1B', '\x1B', '\x1D', '\x1D', '\x2', '\xDE', 
		'\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x30', '\x3', '\x2', '\x2', '\x2', '\b', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'V', '\x3', '\x2', '\x2', '\x2', '\f', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x65', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x12', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '{', '\x3', '\x2', '\x2', '\x2', '\x16', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '!', '\x5', '\x4', '\x3', '\x2', '\x1F', '!', '\x5', '\xE', '\b', 
		'\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '%', 
		'*', '\x5', '\x6', '\x4', '\x2', '&', '*', '\x5', '\b', '\x5', '\x2', 
		'\'', '*', '\x5', '\n', '\x6', '\x2', '(', '*', '\x5', '\f', '\a', '\x2', 
		')', '%', '\x3', '\x2', '\x2', '\x2', ')', '&', '\x3', '\x2', '\x2', '\x2', 
		')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x3', '\x2', 
		'\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x5', '\x10', 
		'\t', '\x2', '.', ')', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', 
		'\a', '\f', '\x2', '\x2', '\x31', '\x34', '\a', '&', '\x2', '\x2', '\x32', 
		'\x34', '\x5', '\x1C', '\xF', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x38', '\a', '\r', '\x2', '\x2', '\x36', 
		'\x39', '\x5', '\x16', '\f', '\x2', '\x37', '\x39', '\x5', '\x18', '\r', 
		'\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', '\x35', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'\a', '\x3', '\x2', '\x2', '\x2', '<', '?', '\a', '&', '\x2', '\x2', '=', 
		'?', '\x5', '\x1C', '\xF', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\a', '\r', '\x2', '\x2', '\x41', '\x44', '\x5', '\x16', 
		'\f', '\x2', '\x42', '\x44', '\x5', '\x18', '\r', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'U', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '&', '\x2', 
		'\x2', '\x46', 'G', '\a', '\r', '\x2', '\x2', 'G', 'U', '\x5', '\x16', 
		'\f', '\x2', 'H', 'I', '\a', '&', '\x2', '\x2', 'I', 'J', '\a', '\x1B', 
		'\x2', '\x2', 'J', 'U', '\x5', '\x16', '\f', '\x2', 'K', 'L', '\a', '&', 
		'\x2', '\x2', 'L', 'M', '\a', '\x1D', '\x2', '\x2', 'M', 'U', '\x5', '\x16', 
		'\f', '\x2', 'N', 'O', '\a', '&', '\x2', '\x2', 'O', 'P', '\a', '\x1E', 
		'\x2', '\x2', 'P', 'U', '\x5', '\x16', '\f', '\x2', 'Q', 'R', '\a', '&', 
		'\x2', '\x2', 'R', 'S', '\a', '\x1C', '\x2', '\x2', 'S', 'U', '\x5', '\x16', 
		'\f', '\x2', 'T', '>', '\x3', '\x2', '\x2', '\x2', 'T', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'H', '\x3', '\x2', '\x2', '\x2', 'T', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'N', '\x3', '\x2', '\x2', '\x2', 'T', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'U', '\t', '\x3', '\x2', '\x2', '\x2', 'V', 'W', 
		'\a', '&', '\x2', '\x2', 'W', 'X', '\t', '\x2', '\x2', '\x2', 'X', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\t', '\x2', '\x2', '\x2', 'Z', 
		'[', '\a', '&', '\x2', '\x2', '[', '\r', '\x3', '\x2', '\x2', '\x2', '\\', 
		'`', '\a', '\x4', '\x2', '\x2', ']', '_', '\x5', '\x4', '\x3', '\x2', 
		'^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', '\x62', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\a', '\x5', '\x2', '\x2', 
		'\x64', '\x66', '\x5', '\x4', '\x3', '\x2', '\x65', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '\x6', '\x2', '\x2', 'h', 
		'i', '\a', '\x15', '\x2', '\x2', 'i', 'j', '\x5', '\x16', '\f', '\x2', 
		'j', 'k', '\a', '\x16', '\x2', '\x2', 'k', 'o', '\x5', '\xE', '\b', '\x2', 
		'l', 'n', '\x5', '\x12', '\n', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x5', '\x14', '\v', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\x11', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\a', '\x2', 
		'\x2', 'v', 'w', '\a', '\x15', '\x2', '\x2', 'w', 'x', '\x5', '\x16', 
		'\f', '\x2', 'x', 'y', '\a', '\x16', '\x2', '\x2', 'y', 'z', '\x5', '\xE', 
		'\b', '\x2', 'z', '\x13', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', 
		'\a', '\x2', '\x2', '|', '}', '\x5', '\xE', '\b', '\x2', '}', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\b', '\f', '\x1', '\x2', '\x7F', 
		'\x92', '\a', '\'', '\x2', '\x2', '\x80', '\x92', '\a', '&', '\x2', '\x2', 
		'\x81', '\x92', '\a', '\n', '\x2', '\x2', '\x82', '\x92', '\a', '\v', 
		'\x2', '\x2', '\x83', '\x84', '\a', '\x15', '\x2', '\x2', '\x84', '\x85', 
		'\x5', '\x16', '\f', '\x2', '\x85', '\x86', '\a', '\x16', '\x2', '\x2', 
		'\x86', '\x92', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x11', 
		'\x2', '\x2', '\x88', '\x92', '\x5', '\x16', '\f', '\xF', '\x89', '\x8A', 
		'\a', '\x1A', '\x2', '\x2', '\x8A', '\x92', '\x5', '\x16', '\f', '\xE', 
		'\x8B', '\x92', '\x5', '\f', '\a', '\x2', '\x8C', '\x8D', '\a', '&', '\x2', 
		'\x2', '\x8D', '\x92', '\t', '\x2', '\x2', '\x2', '\x8E', '\x92', '\a', 
		'%', '\x2', '\x2', '\x8F', '\x92', '\a', '(', '\x2', '\x2', '\x90', '\x92', 
		'\x5', '\x1C', '\xF', '\x2', '\x91', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x80', '\x3', '\x2', '\x2', '\x2', '\x91', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x82', '\x3', '\x2', '\x2', '\x2', '\x91', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x89', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\f', '\r', '\x2', '\x2', '\x94', '\x95', 
		'\t', '\x3', '\x2', '\x2', '\x95', '\xA6', '\x5', '\x16', '\f', '\xE', 
		'\x96', '\x97', '\f', '\f', '\x2', '\x2', '\x97', '\x98', '\t', '\x4', 
		'\x2', '\x2', '\x98', '\xA6', '\x5', '\x16', '\f', '\r', '\x99', '\x9A', 
		'\f', '\v', '\x2', '\x2', '\x9A', '\x9B', '\t', '\x5', '\x2', '\x2', '\x9B', 
		'\xA6', '\x5', '\x16', '\f', '\f', '\x9C', '\x9D', '\f', '\n', '\x2', 
		'\x2', '\x9D', '\x9E', '\t', '\x6', '\x2', '\x2', '\x9E', '\xA6', '\x5', 
		'\x16', '\f', '\v', '\x9F', '\xA0', '\f', '\t', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x18', '\x2', '\x2', '\xA1', '\xA6', '\x5', '\x16', '\f', 
		'\n', '\xA2', '\xA3', '\f', '\b', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\x19', '\x2', '\x2', '\xA4', '\xA6', '\x5', '\x16', '\f', '\t', '\xA5', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\x99', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xB1', '\a', '\x4', '\x2', 
		'\x2', '\xAB', '\xAD', '\x5', '\x1A', '\xE', '\x2', '\xAC', '\xAE', '\a', 
		'\b', '\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'\x5', '\x2', '\x2', '\xB5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '&', '\x2', '\x2', '\xB7', '\xBA', '\a', '\t', '\x2', '\x2', 
		'\xB8', '\xBB', '\x5', '\x16', '\f', '\x2', '\xB9', '\xBB', '\x5', '\x18', 
		'\r', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBF', '\a', '&', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x17', 
		'\x2', '\x2', '\xBE', '\xC0', '\a', '&', '\x2', '\x2', '\xBF', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x17', ' ', 
		'\"', ')', '.', '\x33', '\x38', ':', '>', '\x43', 'T', '`', '\x65', 'o', 
		's', '\x91', '\xA5', '\xA7', '\xAD', '\xB1', '\xBA', '\xC1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
