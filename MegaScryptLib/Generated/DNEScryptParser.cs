//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DNEScrypt.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DNEScryptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, True=6, False=7, Var=8, Equals=9, 
		Underscore=10, Add=11, Increment=12, Minus=13, Decrement=14, Multiply=15, 
		Divide=16, LeftParenthesis=17, RightParenthesis=18, Dot=19, And=20, Or=21, 
		Not=22, DivideEquals=23, SubEquals=24, MultiplyEquals=25, AddEquals=26, 
		DoubleEquals=27, NotEquals=28, LessOrEqual=29, GreaterOrEqual=30, GreaterThan=31, 
		LessThan=32, Null=33, Id=34, Number=35, String=36, WhiteSpace=37;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_assignment = 3, 
		RULE_increment = 4, RULE_bincrement = 5, RULE_block = 6, RULE_ifStmt = 7, 
		RULE_elseifStmt = 8, RULE_elseStmt = 9, RULE_expression = 10;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "assignment", "increment", "bincrement", 
		"block", "ifStmt", "elseifStmt", "elseStmt", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'if'", "'else'", "'true'", "'false'", "'var'", 
		"'='", "'_'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'('", "')'", 
		"'.'", "'&&'", "'||'", "'!'", "'/='", "'-='", "'*='", "'+='", "'=='", 
		"'!='", "'<='", "'>='", "'>'", "'<'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "True", "False", "Var", "Equals", 
		"Underscore", "Add", "Increment", "Minus", "Decrement", "Multiply", "Divide", 
		"LeftParenthesis", "RightParenthesis", "Dot", "And", "Or", "Not", "DivideEquals", 
		"SubEquals", "MultiplyEquals", "AddEquals", "DoubleEquals", "NotEquals", 
		"LessOrEqual", "GreaterOrEqual", "GreaterThan", "LessThan", "Null", "Id", 
		"Number", "String", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DNEScrypt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DNEScryptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DNEScryptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DNEScryptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
				{
				State = 24;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 22; statement();
					}
					break;
				case 2:
					{
					State = 23; block();
					}
					break;
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public BincrementContext bincrement() {
			return GetRuleContext<BincrementContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case Increment:
			case Decrement:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 29; declaration();
					}
					break;
				case 2:
					{
					State = 30; assignment();
					}
					break;
				case 3:
					{
					State = 31; increment();
					}
					break;
				case 4:
					{
					State = 32; bincrement();
					}
					break;
				}
				State = 35; Match(T__0);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; ifStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DNEScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode Equals() { return GetToken(DNEScryptParser.Equals, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(Var);
			State = 41; Match(Id);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 42; Match(Equals);
				State = 43; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode Equals() { return GetToken(DNEScryptParser.Equals, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DivideEquals() { return GetToken(DNEScryptParser.DivideEquals, 0); }
		public ITerminalNode MultiplyEquals() { return GetToken(DNEScryptParser.MultiplyEquals, 0); }
		public ITerminalNode AddEquals() { return GetToken(DNEScryptParser.AddEquals, 0); }
		public ITerminalNode SubEquals() { return GetToken(DNEScryptParser.SubEquals, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; Match(Id);
				State = 47; Match(Equals);
				State = 48; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(Id);
				State = 50; Match(DivideEquals);
				State = 51; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; Match(Id);
				State = 53; Match(MultiplyEquals);
				State = 54; expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 55; Match(Id);
				State = 56; Match(AddEquals);
				State = 57; expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58; Match(Id);
				State = 59; Match(SubEquals);
				State = 60; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode Increment() { return GetToken(DNEScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(DNEScryptParser.Decrement, 0); }
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 8, RULE_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(Id);
			State = 64;
			_la = TokenStream.LA(1);
			if ( !(_la==Increment || _la==Decrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BincrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode Increment() { return GetToken(DNEScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(DNEScryptParser.Decrement, 0); }
		public BincrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bincrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBincrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BincrementContext bincrement() {
		BincrementContext _localctx = new BincrementContext(Context, State);
		EnterRule(_localctx, 10, RULE_bincrement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !(_la==Increment || _la==Decrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 67; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; Match(T__1);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
					{
					{
					State = 70; statement();
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 76; Match(T__2);
				}
				break;
			case T__3:
			case Var:
			case Increment:
			case Decrement:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(DNEScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(DNEScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifStmtContext[] elseifStmt() {
			return GetRuleContexts<ElseifStmtContext>();
		}
		public ElseifStmtContext elseifStmt(int i) {
			return GetRuleContext<ElseifStmtContext>(i);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(T__3);
			State = 81; Match(LeftParenthesis);
			State = 82; expression(0);
			State = 83; Match(RightParenthesis);
			State = 84; block();
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 85; elseifStmt();
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 91; elseStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(DNEScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(DNEScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStmtContext elseifStmt() {
		ElseifStmtContext _localctx = new ElseifStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__4);
			State = 95; Match(LeftParenthesis);
			State = 96; expression(0);
			State = 97; Match(RightParenthesis);
			State = 98; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__4);
			State = 101; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(DNEScryptParser.Number, 0); }
		public ITerminalNode Id() { return GetToken(DNEScryptParser.Id, 0); }
		public ITerminalNode True() { return GetToken(DNEScryptParser.True, 0); }
		public ITerminalNode False() { return GetToken(DNEScryptParser.False, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(DNEScryptParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(DNEScryptParser.RightParenthesis, 0); }
		public ITerminalNode Minus() { return GetToken(DNEScryptParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(DNEScryptParser.Not, 0); }
		public BincrementContext bincrement() {
			return GetRuleContext<BincrementContext>(0);
		}
		public ITerminalNode Increment() { return GetToken(DNEScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(DNEScryptParser.Decrement, 0); }
		public ITerminalNode Null() { return GetToken(DNEScryptParser.Null, 0); }
		public ITerminalNode String() { return GetToken(DNEScryptParser.String, 0); }
		public ITerminalNode Multiply() { return GetToken(DNEScryptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(DNEScryptParser.Divide, 0); }
		public ITerminalNode Add() { return GetToken(DNEScryptParser.Add, 0); }
		public ITerminalNode LessThan() { return GetToken(DNEScryptParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(DNEScryptParser.GreaterThan, 0); }
		public ITerminalNode DoubleEquals() { return GetToken(DNEScryptParser.DoubleEquals, 0); }
		public ITerminalNode NotEquals() { return GetToken(DNEScryptParser.NotEquals, 0); }
		public ITerminalNode LessOrEqual() { return GetToken(DNEScryptParser.LessOrEqual, 0); }
		public ITerminalNode GreaterOrEqual() { return GetToken(DNEScryptParser.GreaterOrEqual, 0); }
		public ITerminalNode MultiplyEquals() { return GetToken(DNEScryptParser.MultiplyEquals, 0); }
		public ITerminalNode DivideEquals() { return GetToken(DNEScryptParser.DivideEquals, 0); }
		public ITerminalNode And() { return GetToken(DNEScryptParser.And, 0); }
		public ITerminalNode Or() { return GetToken(DNEScryptParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDNEScryptVisitor<TResult> typedVisitor = visitor as IDNEScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 104; Match(Number);
				}
				break;
			case 2:
				{
				State = 105; Match(Id);
				}
				break;
			case 3:
				{
				State = 106; Match(True);
				}
				break;
			case 4:
				{
				State = 107; Match(False);
				}
				break;
			case 5:
				{
				State = 108; Match(LeftParenthesis);
				State = 109; expression(0);
				State = 110; Match(RightParenthesis);
				}
				break;
			case 6:
				{
				State = 112; Match(Minus);
				State = 113; expression(12);
				}
				break;
			case 7:
				{
				State = 114; Match(Not);
				State = 115; expression(11);
				}
				break;
			case 8:
				{
				State = 116; bincrement();
				}
				break;
			case 9:
				{
				State = 117; Match(Id);
				State = 118;
				_la = TokenStream.LA(1);
				if ( !(_la==Increment || _la==Decrement) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				{
				State = 119; Match(Null);
				}
				break;
			case 11:
				{
				State = 120; Match(String);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 141;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 124;
						_la = TokenStream.LA(1);
						if ( !(_la==Multiply || _la==Divide) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 125; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 127;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 128; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 130;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DoubleEquals) | (1L << NotEquals) | (1L << LessOrEqual) | (1L << GreaterOrEqual) | (1L << GreaterThan) | (1L << LessThan))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 131; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 133;
						_la = TokenStream.LA(1);
						if ( !(_la==DivideEquals || _la==MultiplyEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 134; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 136; Match(And);
						State = 137; expression(7);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 139; Match(Or);
						State = 140; expression(6);
						}
						break;
					}
					} 
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\x95', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1B', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1E', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '$', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'/', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '@', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', 'J', '\n', '\b', '\f', '\b', '\xE', '\b', 'M', '\v', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'Q', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', 'Y', '\n', '\t', '\f', '\t', '\xE', '\t', '\\', '\v', '\t', '\x3', 
		'\t', '\x5', '\t', '_', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '|', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '\x90', '\n', '\f', '\f', '\f', '\xE', '\f', '\x93', '\v', 
		'\f', '\x3', '\f', '\x2', '\x3', '\x16', '\r', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x2', '\a', '\x4', 
		'\x2', '\xE', '\xE', '\x10', '\x10', '\x3', '\x2', '\x11', '\x12', '\x4', 
		'\x2', '\r', '\r', '\xF', '\xF', '\x3', '\x2', '\x1D', '\"', '\x4', '\x2', 
		'\x19', '\x19', '\x1B', '\x1B', '\x2', '\xA8', '\x2', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', '\x6', '*', '\x3', 
		'\x2', '\x2', '\x2', '\b', '?', '\x3', '\x2', '\x2', '\x2', '\n', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'P', '\x3', '\x2', '\x2', '\x2', '\x10', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '`', '\x3', '\x2', '\x2', '\x2', '\x14', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '{', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x1B', '\x5', '\x4', '\x3', '\x2', '\x19', '\x1B', '\x5', '\xE', '\b', 
		'\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '$', '\x5', '\x6', '\x4', '\x2', ' ', '$', 
		'\x5', '\b', '\x5', '\x2', '!', '$', '\x5', '\n', '\x6', '\x2', '\"', 
		'$', '\x5', '\f', '\a', '\x2', '#', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'#', ' ', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '\x3', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', 
		'\x2', '\'', ')', '\x5', '\x10', '\t', '\x2', '(', '#', '\x3', '\x2', 
		'\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\a', '\n', '\x2', '\x2', '+', '.', '\a', 
		'$', '\x2', '\x2', ',', '-', '\a', '\v', '\x2', '\x2', '-', '/', '\x5', 
		'\x16', '\f', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', 
		'\x2', '\x2', '\x2', '/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '$', '\x2', '\x2', '\x31', '\x32', '\a', '\v', '\x2', '\x2', '\x32', 
		'@', '\x5', '\x16', '\f', '\x2', '\x33', '\x34', '\a', '$', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\x19', '\x2', '\x2', '\x35', '@', '\x5', '\x16', 
		'\f', '\x2', '\x36', '\x37', '\a', '$', '\x2', '\x2', '\x37', '\x38', 
		'\a', '\x1B', '\x2', '\x2', '\x38', '@', '\x5', '\x16', '\f', '\x2', '\x39', 
		':', '\a', '$', '\x2', '\x2', ':', ';', '\a', '\x1C', '\x2', '\x2', ';', 
		'@', '\x5', '\x16', '\f', '\x2', '<', '=', '\a', '$', '\x2', '\x2', '=', 
		'>', '\a', '\x1A', '\x2', '\x2', '>', '@', '\x5', '\x16', '\f', '\x2', 
		'?', '\x30', '\x3', '\x2', '\x2', '\x2', '?', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x36', '\x3', '\x2', '\x2', '\x2', '?', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '?', '<', '\x3', '\x2', '\x2', '\x2', '@', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\a', '$', '\x2', '\x2', '\x42', 
		'\x43', '\t', '\x2', '\x2', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\t', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 
		'$', '\x2', '\x2', '\x46', '\r', '\x3', '\x2', '\x2', '\x2', 'G', 'K', 
		'\a', '\x4', '\x2', '\x2', 'H', 'J', '\x5', '\x4', '\x3', '\x2', 'I', 
		'H', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\a', '\x5', '\x2', '\x2', 'O', 'Q', '\x5', '\x4', '\x3', '\x2', 
		'P', 'G', '\x3', '\x2', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', '\xF', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x6', '\x2', 
		'\x2', 'S', 'T', '\a', '\x13', '\x2', '\x2', 'T', 'U', '\x5', '\x16', 
		'\f', '\x2', 'U', 'V', '\a', '\x14', '\x2', '\x2', 'V', 'Z', '\x5', '\xE', 
		'\b', '\x2', 'W', 'Y', '\x5', '\x12', '\n', '\x2', 'X', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '_', 
		'\x5', '\x14', '\v', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '^', 
		'_', '\x3', '\x2', '\x2', '\x2', '_', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\a', '\a', '\x2', '\x2', '\x61', '\x62', '\a', '\x13', '\x2', 
		'\x2', '\x62', '\x63', '\x5', '\x16', '\f', '\x2', '\x63', '\x64', '\a', 
		'\x14', '\x2', '\x2', '\x64', '\x65', '\x5', '\xE', '\b', '\x2', '\x65', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\a', '\x2', '\x2', 
		'g', 'h', '\x5', '\xE', '\b', '\x2', 'h', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\b', '\f', '\x1', '\x2', 'j', '|', '\a', '%', '\x2', 
		'\x2', 'k', '|', '\a', '$', '\x2', '\x2', 'l', '|', '\a', '\b', '\x2', 
		'\x2', 'm', '|', '\a', '\t', '\x2', '\x2', 'n', 'o', '\a', '\x13', '\x2', 
		'\x2', 'o', 'p', '\x5', '\x16', '\f', '\x2', 'p', 'q', '\a', '\x14', '\x2', 
		'\x2', 'q', '|', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\xF', '\x2', 
		'\x2', 's', '|', '\x5', '\x16', '\f', '\xE', 't', 'u', '\a', '\x18', '\x2', 
		'\x2', 'u', '|', '\x5', '\x16', '\f', '\r', 'v', '|', '\x5', '\f', '\a', 
		'\x2', 'w', 'x', '\a', '$', '\x2', '\x2', 'x', '|', '\t', '\x2', '\x2', 
		'\x2', 'y', '|', '\a', '#', '\x2', '\x2', 'z', '|', '\a', '&', '\x2', 
		'\x2', '{', 'i', '\x3', '\x2', '\x2', '\x2', '{', 'k', '\x3', '\x2', '\x2', 
		'\x2', '{', 'l', '\x3', '\x2', '\x2', '\x2', '{', 'm', '\x3', '\x2', '\x2', 
		'\x2', '{', 'n', '\x3', '\x2', '\x2', '\x2', '{', 'r', '\x3', '\x2', '\x2', 
		'\x2', '{', 't', '\x3', '\x2', '\x2', '\x2', '{', 'v', '\x3', '\x2', '\x2', 
		'\x2', '{', 'w', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\f', '\f', '\x2', '\x2', '~', '\x7F', '\t', '\x3', 
		'\x2', '\x2', '\x7F', '\x90', '\x5', '\x16', '\f', '\r', '\x80', '\x81', 
		'\f', '\v', '\x2', '\x2', '\x81', '\x82', '\t', '\x4', '\x2', '\x2', '\x82', 
		'\x90', '\x5', '\x16', '\f', '\f', '\x83', '\x84', '\f', '\n', '\x2', 
		'\x2', '\x84', '\x85', '\t', '\x5', '\x2', '\x2', '\x85', '\x90', '\x5', 
		'\x16', '\f', '\v', '\x86', '\x87', '\f', '\t', '\x2', '\x2', '\x87', 
		'\x88', '\t', '\x6', '\x2', '\x2', '\x88', '\x90', '\x5', '\x16', '\f', 
		'\n', '\x89', '\x8A', '\f', '\b', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		'\x16', '\x2', '\x2', '\x8B', '\x90', '\x5', '\x16', '\f', '\t', '\x8C', 
		'\x8D', '\f', '\a', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x17', '\x2', 
		'\x2', '\x8E', '\x90', '\x5', '\x16', '\f', '\b', '\x8F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x17', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x1A', '\x1C', '#', '(', '.', '?', 'K', 'P', 
		'Z', '^', '{', '\x8F', '\x91',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
