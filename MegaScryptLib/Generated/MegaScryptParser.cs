//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MegaScrypt.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MegaScryptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, True=15, False=16, Var=17, 
		Equals=18, Underscore=19, Add=20, Increment=21, Minus=22, Decrement=23, 
		Break=24, Continue=25, Multiply=26, Divide=27, LeftParenthesis=28, RightParenthesis=29, 
		Dot=30, And=31, Modulus=32, Or=33, Not=34, DivideEquals=35, SubEquals=36, 
		MultiplyEquals=37, AddEquals=38, DoubleEquals=39, NotEquals=40, LessOrEqual=41, 
		GreaterOrEqual=42, GreaterThan=43, LessThan=44, LeftBracket=45, RightBracket=46, 
		Null=47, Id=48, Number=49, String=50, WhiteSpace=51;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_compoundId = 2, RULE_declaration = 3, 
		RULE_assignment = 4, RULE_increment = 5, RULE_bincrement = 6, RULE_block = 7, 
		RULE_ifStmt = 8, RULE_elseifStmt = 9, RULE_elseStmt = 10, RULE_expression = 11, 
		RULE_funcDeclearation = 12, RULE_varList = 13, RULE_returnStmt = 14, RULE_invocation = 15, 
		RULE_paramList = 16, RULE_object = 17, RULE_objectPair = 18, RULE_objectGet = 19, 
		RULE_objectValidEntry = 20, RULE_array = 21, RULE_arrayIndex = 22, RULE_forLoop = 23, 
		RULE_whileLoop = 24, RULE_forEachLoop = 25, RULE_doWhileLoop = 26;
	public static readonly string[] ruleNames = {
		"program", "statement", "compoundId", "declaration", "assignment", "increment", 
		"bincrement", "block", "ifStmt", "elseifStmt", "elseStmt", "expression", 
		"funcDeclearation", "varList", "returnStmt", "invocation", "paramList", 
		"object", "objectPair", "objectGet", "objectValidEntry", "array", "arrayIndex", 
		"forLoop", "whileLoop", "forEachLoop", "doWhileLoop"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'if'", "'else'", "'function'", "','", "'return'", 
		"':'", "'for'", "'while'", "'foreach'", "'in'", "'do'", "'true'", "'false'", 
		"'var'", "'='", "'_'", "'+'", "'++'", "'-'", "'--'", "'break'", "'continue'", 
		"'*'", "'/'", "'('", "')'", "'.'", "'&&'", "'%'", "'||'", "'!'", "'/='", 
		"'-='", "'*='", "'+='", "'=='", "'!='", "'<='", "'>='", "'>'", "'<'", 
		"'['", "']'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "True", "False", "Var", "Equals", "Underscore", "Add", 
		"Increment", "Minus", "Decrement", "Break", "Continue", "Multiply", "Divide", 
		"LeftParenthesis", "RightParenthesis", "Dot", "And", "Modulus", "Or", 
		"Not", "DivideEquals", "SubEquals", "MultiplyEquals", "AddEquals", "DoubleEquals", 
		"NotEquals", "LessOrEqual", "GreaterOrEqual", "GreaterThan", "LessThan", 
		"LeftBracket", "RightBracket", "Null", "Id", "Number", "String", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MegaScrypt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MegaScryptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MegaScryptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MegaScryptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Break) | (1L << Continue) | (1L << Id))) != 0)) {
				{
				State = 56;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 54; statement();
					}
					break;
				case 2:
					{
					State = 55; block();
					}
					break;
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public BincrementContext bincrement() {
			return GetRuleContext<BincrementContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public ITerminalNode Break() { return GetToken(MegaScryptParser.Break, 0); }
		public ITerminalNode Continue() { return GetToken(MegaScryptParser.Continue, 0); }
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public ForEachLoopContext forEachLoop() {
			return GetRuleContext<ForEachLoopContext>(0);
		}
		public DoWhileLoopContext doWhileLoop() {
			return GetRuleContext<DoWhileLoopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case Var:
			case Increment:
			case Decrement:
			case Break:
			case Continue:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 61; declaration();
					}
					break;
				case 2:
					{
					State = 62; assignment();
					}
					break;
				case 3:
					{
					State = 63; increment();
					}
					break;
				case 4:
					{
					State = 64; bincrement();
					}
					break;
				case 5:
					{
					State = 65; invocation();
					}
					break;
				case 6:
					{
					State = 66; returnStmt();
					}
					break;
				case 7:
					{
					State = 67; Match(Break);
					}
					break;
				case 8:
					{
					State = 68; Match(Continue);
					}
					break;
				}
				State = 71; Match(T__0);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; ifStmt();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73; forLoop();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 74; whileLoop();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75; forEachLoop();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 76; doWhileLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundIdContext : ParserRuleContext {
		public ObjectGetContext objectGet() {
			return GetRuleContext<ObjectGetContext>(0);
		}
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public CompoundIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundId; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundIdContext compoundId() {
		CompoundIdContext _localctx = new CompoundIdContext(Context, State);
		EnterRule(_localctx, 4, RULE_compoundId);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; objectGet();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; Match(Id);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ObjectGetContext objectGet() {
			return GetRuleContext<ObjectGetContext>(0);
		}
		public ITerminalNode Equals() { return GetToken(MegaScryptParser.Equals, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(Var);
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 84; Match(Id);
				}
				break;
			case 2:
				{
				State = 85; objectGet();
				}
				break;
			}
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 88; Match(Equals);
				State = 92;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 89; expression(0);
					}
					break;
				case 2:
					{
					State = 90; @object();
					}
					break;
				case 3:
					{
					State = 91; array();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public ITerminalNode Equals() { return GetToken(MegaScryptParser.Equals, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode DivideEquals() { return GetToken(MegaScryptParser.DivideEquals, 0); }
		public ITerminalNode MultiplyEquals() { return GetToken(MegaScryptParser.MultiplyEquals, 0); }
		public ITerminalNode AddEquals() { return GetToken(MegaScryptParser.AddEquals, 0); }
		public ITerminalNode SubEquals() { return GetToken(MegaScryptParser.SubEquals, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; compoundId();
				State = 97; Match(Equals);
				State = 101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 98; expression(0);
					}
					break;
				case 2:
					{
					State = 99; @object();
					}
					break;
				case 3:
					{
					State = 100; array();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; compoundId();
				State = 104; Match(Equals);
				State = 105; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 107; compoundId();
				State = 108; Match(DivideEquals);
				State = 109; expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111; compoundId();
				State = 112; Match(MultiplyEquals);
				State = 113; expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115; compoundId();
				State = 116; Match(AddEquals);
				State = 117; expression(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 119; compoundId();
				State = 120; Match(SubEquals);
				State = 121; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode Increment() { return GetToken(MegaScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(MegaScryptParser.Decrement, 0); }
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 10, RULE_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(Id);
			State = 126;
			_la = TokenStream.LA(1);
			if ( !(_la==Increment || _la==Decrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BincrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode Increment() { return GetToken(MegaScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(MegaScryptParser.Decrement, 0); }
		public BincrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bincrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBincrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BincrementContext bincrement() {
		BincrementContext _localctx = new BincrementContext(Context, State);
		EnterRule(_localctx, 12, RULE_bincrement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_la = TokenStream.LA(1);
			if ( !(_la==Increment || _la==Decrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 129; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(T__1);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Break) | (1L << Continue) | (1L << Id))) != 0)) {
					{
					{
					State = 132; statement();
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 138; Match(T__2);
				}
				break;
			case T__3:
			case T__7:
			case T__9:
			case T__10:
			case T__11:
			case T__13:
			case Var:
			case Increment:
			case Decrement:
			case Break:
			case Continue:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifStmtContext[] elseifStmt() {
			return GetRuleContexts<ElseifStmtContext>();
		}
		public ElseifStmtContext elseifStmt(int i) {
			return GetRuleContext<ElseifStmtContext>(i);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(T__3);
			State = 143; Match(LeftParenthesis);
			State = 144; expression(0);
			State = 145; Match(RightParenthesis);
			State = 146; block();
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 147; elseifStmt();
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 153; elseStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStmtContext elseifStmt() {
		ElseifStmtContext _localctx = new ElseifStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(T__4);
			State = 157; Match(T__3);
			State = 158; Match(LeftParenthesis);
			State = 159; expression(0);
			State = 160; Match(RightParenthesis);
			State = 161; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(T__4);
			State = 164; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(MegaScryptParser.Number, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode True() { return GetToken(MegaScryptParser.True, 0); }
		public ITerminalNode False() { return GetToken(MegaScryptParser.False, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public FuncDeclearationContext funcDeclearation() {
			return GetRuleContext<FuncDeclearationContext>(0);
		}
		public ITerminalNode Minus() { return GetToken(MegaScryptParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(MegaScryptParser.Not, 0); }
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public BincrementContext bincrement() {
			return GetRuleContext<BincrementContext>(0);
		}
		public ITerminalNode Increment() { return GetToken(MegaScryptParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(MegaScryptParser.Decrement, 0); }
		public ITerminalNode Null() { return GetToken(MegaScryptParser.Null, 0); }
		public ITerminalNode String() { return GetToken(MegaScryptParser.String, 0); }
		public ObjectGetContext objectGet() {
			return GetRuleContext<ObjectGetContext>(0);
		}
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public ITerminalNode Multiply() { return GetToken(MegaScryptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(MegaScryptParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(MegaScryptParser.Modulus, 0); }
		public ITerminalNode Add() { return GetToken(MegaScryptParser.Add, 0); }
		public ITerminalNode LessThan() { return GetToken(MegaScryptParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(MegaScryptParser.GreaterThan, 0); }
		public ITerminalNode DoubleEquals() { return GetToken(MegaScryptParser.DoubleEquals, 0); }
		public ITerminalNode NotEquals() { return GetToken(MegaScryptParser.NotEquals, 0); }
		public ITerminalNode LessOrEqual() { return GetToken(MegaScryptParser.LessOrEqual, 0); }
		public ITerminalNode GreaterOrEqual() { return GetToken(MegaScryptParser.GreaterOrEqual, 0); }
		public ITerminalNode MultiplyEquals() { return GetToken(MegaScryptParser.MultiplyEquals, 0); }
		public ITerminalNode DivideEquals() { return GetToken(MegaScryptParser.DivideEquals, 0); }
		public ITerminalNode And() { return GetToken(MegaScryptParser.And, 0); }
		public ITerminalNode Or() { return GetToken(MegaScryptParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 167; Match(Number);
				}
				break;
			case 2:
				{
				State = 168; Match(Id);
				}
				break;
			case 3:
				{
				State = 169; Match(True);
				}
				break;
			case 4:
				{
				State = 170; Match(False);
				}
				break;
			case 5:
				{
				State = 171; Match(LeftParenthesis);
				State = 172; expression(0);
				State = 173; Match(RightParenthesis);
				}
				break;
			case 6:
				{
				State = 175; funcDeclearation();
				}
				break;
			case 7:
				{
				State = 176; Match(Minus);
				State = 177; expression(16);
				}
				break;
			case 8:
				{
				State = 178; Match(Not);
				State = 179; expression(15);
				}
				break;
			case 9:
				{
				State = 180; invocation();
				}
				break;
			case 10:
				{
				State = 181; array();
				}
				break;
			case 11:
				{
				State = 182; bincrement();
				}
				break;
			case 12:
				{
				State = 183; Match(Id);
				State = 184;
				_la = TokenStream.LA(1);
				if ( !(_la==Increment || _la==Decrement) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				{
				State = 185; Match(Null);
				}
				break;
			case 14:
				{
				State = 186; Match(String);
				}
				break;
			case 15:
				{
				State = 187; objectGet();
				}
				break;
			case 16:
				{
				State = 188; compoundId();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 209;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 191;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 192;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 193; expression(13);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 194;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 195;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 196; expression(12);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 197;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 198;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DoubleEquals) | (1L << NotEquals) | (1L << LessOrEqual) | (1L << GreaterOrEqual) | (1L << GreaterThan) | (1L << LessThan))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 199; expression(11);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 200;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 201;
						_la = TokenStream.LA(1);
						if ( !(_la==DivideEquals || _la==MultiplyEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 202; expression(10);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 203;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 204; Match(And);
						State = 205; expression(9);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 207; Match(Or);
						State = 208; expression(8);
						}
						break;
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncDeclearationContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public VarListContext varList() {
			return GetRuleContext<VarListContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncDeclearationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclearation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclearation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclearationContext funcDeclearation() {
		FuncDeclearationContext _localctx = new FuncDeclearationContext(Context, State);
		EnterRule(_localctx, 24, RULE_funcDeclearation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(T__5);
			State = 215; Match(LeftParenthesis);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 216; varList();
				}
			}

			State = 219; Match(RightParenthesis);
			State = 220; Match(T__1);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Break) | (1L << Continue) | (1L << Id))) != 0)) {
				{
				{
				State = 221; statement();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarListContext : ParserRuleContext {
		public ITerminalNode[] Var() { return GetTokens(MegaScryptParser.Var); }
		public ITerminalNode Var(int i) {
			return GetToken(MegaScryptParser.Var, i);
		}
		public ITerminalNode[] Id() { return GetTokens(MegaScryptParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(MegaScryptParser.Id, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarListContext varList() {
		VarListContext _localctx = new VarListContext(Context, State);
		EnterRule(_localctx, 26, RULE_varList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(Var);
			State = 230; Match(Id);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 231; Match(T__6);
				State = 232; Match(Var);
				State = 233; Match(Id);
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(T__7);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << True) | (1L << False) | (1L << Increment) | (1L << Minus) | (1L << Decrement) | (1L << LeftParenthesis) | (1L << Not) | (1L << LeftBracket) | (1L << Null) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
				{
				State = 240; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 30, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; compoundId();
			State = 244; Match(LeftParenthesis);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << True) | (1L << False) | (1L << Increment) | (1L << Minus) | (1L << Decrement) | (1L << LeftParenthesis) | (1L << Not) | (1L << LeftBracket) | (1L << Null) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
				{
				State = 245; paramList();
				}
			}

			State = 248; Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 32, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; expression(0);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 251; Match(T__6);
				State = 252; expression(0);
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ObjectPairContext[] objectPair() {
			return GetRuleContexts<ObjectPairContext>();
		}
		public ObjectPairContext objectPair(int i) {
			return GetRuleContext<ObjectPairContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 34, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(T__1);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 259; objectPair();
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 260; Match(T__6);
					}
				}

				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPairContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ObjectPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectPair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPairContext objectPair() {
		ObjectPairContext _localctx = new ObjectPairContext(Context, State);
		EnterRule(_localctx, 36, RULE_objectPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(Id);
			State = 271; Match(T__8);
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 272; expression(0);
				}
				break;
			case 2:
				{
				State = 273; @object();
				}
				break;
			case 3:
				{
				State = 274; array();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectGetContext : ParserRuleContext {
		public ObjectValidEntryContext[] objectValidEntry() {
			return GetRuleContexts<ObjectValidEntryContext>();
		}
		public ObjectValidEntryContext objectValidEntry(int i) {
			return GetRuleContext<ObjectValidEntryContext>(i);
		}
		public ITerminalNode[] Dot() { return GetTokens(MegaScryptParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(MegaScryptParser.Dot, i);
		}
		public ObjectGetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectGet; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectGetContext objectGet() {
		ObjectGetContext _localctx = new ObjectGetContext(Context, State);
		EnterRule(_localctx, 38, RULE_objectGet);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 277; objectValidEntry();
			}
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 278; Match(Dot);
					State = 279; objectValidEntry();
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValidEntryContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public ObjectValidEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValidEntry; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValidEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValidEntryContext objectValidEntry() {
		ObjectValidEntryContext _localctx = new ObjectValidEntryContext(Context, State);
		EnterRule(_localctx, 40, RULE_objectValidEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(Id);
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 286; arrayIndex();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(MegaScryptParser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(MegaScryptParser.RightBracket, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 42, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(LeftBracket);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << True) | (1L << False) | (1L << Increment) | (1L << Minus) | (1L << Decrement) | (1L << LeftParenthesis) | (1L << Not) | (1L << LeftBracket) | (1L << Null) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
				{
				State = 290; paramList();
				}
			}

			State = 293; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(MegaScryptParser.LeftBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightBracket() { return GetToken(MegaScryptParser.RightBracket, 0); }
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(LeftBracket);
			State = 296; expression(0);
			State = 297; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode[] Id() { return GetTokens(MegaScryptParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(MegaScryptParser.Id, i);
		}
		public ITerminalNode Equals() { return GetToken(MegaScryptParser.Equals, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode LessThan() { return GetToken(MegaScryptParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(MegaScryptParser.GreaterThan, 0); }
		public ITerminalNode LessOrEqual() { return GetToken(MegaScryptParser.LessOrEqual, 0); }
		public ITerminalNode GreaterOrEqual() { return GetToken(MegaScryptParser.GreaterOrEqual, 0); }
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public BincrementContext bincrement() {
			return GetRuleContext<BincrementContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 46, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(T__9);
			State = 300; Match(LeftParenthesis);
			State = 301; Match(Var);
			State = 302; Match(Id);
			State = 303; Match(Equals);
			State = 304; expression(0);
			State = 305; Match(T__0);
			State = 306; Match(Id);
			State = 307;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessOrEqual) | (1L << GreaterOrEqual) | (1L << GreaterThan) | (1L << LessThan))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 308; expression(0);
			State = 309; Match(T__0);
			State = 312;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				{
				State = 310; increment();
				}
				break;
			case Increment:
			case Decrement:
				{
				State = 311; bincrement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 314; Match(RightParenthesis);
			State = 315; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 48, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(T__10);
			State = 318; Match(LeftParenthesis);
			State = 319; expression(0);
			State = 320; Match(RightParenthesis);
			State = 321; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachLoopContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForEachLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachLoopContext forEachLoop() {
		ForEachLoopContext _localctx = new ForEachLoopContext(Context, State);
		EnterRule(_localctx, 50, RULE_forEachLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(T__11);
			State = 324; Match(LeftParenthesis);
			State = 325; Match(Var);
			State = 326; Match(Id);
			State = 327; Match(T__12);
			State = 328; compoundId();
			State = 329; Match(RightParenthesis);
			State = 330; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileLoopContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public DoWhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileLoopContext doWhileLoop() {
		DoWhileLoopContext _localctx = new DoWhileLoopContext(Context, State);
		EnterRule(_localctx, 52, RULE_doWhileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(T__13);
			State = 333; block();
			State = 334; Match(T__10);
			State = 335; Match(LeftParenthesis);
			State = 336; expression(0);
			State = 337; Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x156', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', ';', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '>', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'H', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'P', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'T', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'Y', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '_', '\n', '\x5', '\x5', '\x5', '\x61', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'h', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '~', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x88', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x8B', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x8F', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x97', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x9A', '\v', '\n', '\x3', '\n', '\x5', '\n', '\x9D', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xC0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\xD4', '\n', '\r', '\f', '\r', '\xE', '\r', '\xD7', '\v', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xDC', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xE1', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xE4', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xED', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xF0', '\v', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xF4', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xF9', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x100', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x103', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x108', '\n', '\x13', '\a', '\x13', '\x10A', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\x10D', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x116', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\a', '\x15', '\x11B', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\x11E', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x122', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x126', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x13B', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x2', '\x3', '\x18', '\x1D', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x2', '\b', '\x4', '\x2', '\x17', 
		'\x17', '\x19', '\x19', '\x4', '\x2', '\x1C', '\x1D', '\"', '\"', '\x4', 
		'\x2', '\x16', '\x16', '\x18', '\x18', '\x3', '\x2', ')', '.', '\x4', 
		'\x2', '%', '%', '\'', '\'', '\x3', '\x2', '+', '.', '\x2', '\x17B', '\x2', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x4', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'S', '\x3', '\x2', '\x2', '\x2', '\b', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\n', '}', '\x3', '\x2', '\x2', '\x2', '\f', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x82', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xF1', '\x3', '\x2', '\x2', '\x2', ' ', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xFC', '\x3', '\x2', '\x2', '\x2', '$', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x117', '\x3', '\x2', '\x2', '\x2', '*', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x123', '\x3', '\x2', '\x2', '\x2', '.', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x34', '\x145', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x38', ';', 
		'\x5', '\x4', '\x3', '\x2', '\x39', ';', '\x5', '\x10', '\t', '\x2', ':', 
		'\x38', '\x3', '\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', 'H', '\x5', '\b', 
		'\x5', '\x2', '@', 'H', '\x5', '\n', '\x6', '\x2', '\x41', 'H', '\x5', 
		'\f', '\a', '\x2', '\x42', 'H', '\x5', '\xE', '\b', '\x2', '\x43', 'H', 
		'\x5', ' ', '\x11', '\x2', '\x44', 'H', '\x5', '\x1E', '\x10', '\x2', 
		'\x45', 'H', '\a', '\x1A', '\x2', '\x2', '\x46', 'H', '\a', '\x1B', '\x2', 
		'\x2', 'G', '?', '\x3', '\x2', '\x2', '\x2', 'G', '@', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x41', '\x3', '\x2', '\x2', '\x2', 'G', '\x42', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x43', '\x3', '\x2', '\x2', '\x2', 'G', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 
		'P', '\a', '\x3', '\x2', '\x2', 'J', 'P', '\x5', '\x12', '\n', '\x2', 
		'K', 'P', '\x5', '\x30', '\x19', '\x2', 'L', 'P', '\x5', '\x32', '\x1A', 
		'\x2', 'M', 'P', '\x5', '\x34', '\x1B', '\x2', 'N', 'P', '\x5', '\x36', 
		'\x1C', '\x2', 'O', 'G', '\x3', '\x2', '\x2', '\x2', 'O', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'K', '\x3', '\x2', '\x2', '\x2', 'O', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'P', '\x5', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', 
		'\x5', '(', '\x15', '\x2', 'R', 'T', '\a', '\x32', '\x2', '\x2', 'S', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', '\a', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\a', '\x13', '\x2', 
		'\x2', 'V', 'Y', '\a', '\x32', '\x2', '\x2', 'W', 'Y', '\x5', '(', '\x15', 
		'\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '`', '\x3', '\x2', '\x2', '\x2', 'Z', '^', '\a', '\x14', '\x2', 
		'\x2', '[', '_', '\x5', '\x18', '\r', '\x2', '\\', '_', '\x5', '$', '\x13', 
		'\x2', ']', '_', '\x5', ',', '\x17', '\x2', '^', '[', '\x3', '\x2', '\x2', 
		'\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x5', '\x6', '\x4', 
		'\x2', '\x63', 'g', '\a', '\x14', '\x2', '\x2', '\x64', 'h', '\x5', '\x18', 
		'\r', '\x2', '\x65', 'h', '\x5', '$', '\x13', '\x2', '\x66', 'h', '\x5', 
		',', '\x17', '\x2', 'g', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 
		'~', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x5', '\x6', '\x4', '\x2', 
		'j', 'k', '\a', '\x14', '\x2', '\x2', 'k', 'l', '\x5', '\x18', '\r', '\x2', 
		'l', '~', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', '\x6', '\x4', '\x2', 
		'n', 'o', '\a', '%', '\x2', '\x2', 'o', 'p', '\x5', '\x18', '\r', '\x2', 
		'p', '~', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x5', '\x6', '\x4', '\x2', 
		'r', 's', '\a', '\'', '\x2', '\x2', 's', 't', '\x5', '\x18', '\r', '\x2', 
		't', '~', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\x6', '\x4', '\x2', 
		'v', 'w', '\a', '(', '\x2', '\x2', 'w', 'x', '\x5', '\x18', '\r', '\x2', 
		'x', '~', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', '\x6', '\x4', '\x2', 
		'z', '{', '\a', '&', '\x2', '\x2', '{', '|', '\x5', '\x18', '\r', '\x2', 
		'|', '~', '\x3', '\x2', '\x2', '\x2', '}', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '}', 'i', '\x3', '\x2', '\x2', '\x2', '}', 'm', '\x3', '\x2', '\x2', 
		'\x2', '}', 'q', '\x3', '\x2', '\x2', '\x2', '}', 'u', '\x3', '\x2', '\x2', 
		'\x2', '}', 'y', '\x3', '\x2', '\x2', '\x2', '~', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\x32', '\x2', '\x2', '\x80', '\x81', 
		'\t', '\x2', '\x2', '\x2', '\x81', '\r', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\t', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x32', '\x2', 
		'\x2', '\x84', '\xF', '\x3', '\x2', '\x2', '\x2', '\x85', '\x89', '\a', 
		'\x4', '\x2', '\x2', '\x86', '\x88', '\x5', '\x4', '\x3', '\x2', '\x87', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\a', '\x5', '\x2', 
		'\x2', '\x8D', '\x8F', '\x5', '\x4', '\x3', '\x2', '\x8E', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x6', '\x2', 
		'\x2', '\x91', '\x92', '\a', '\x1E', '\x2', '\x2', '\x92', '\x93', '\x5', 
		'\x18', '\r', '\x2', '\x93', '\x94', '\a', '\x1F', '\x2', '\x2', '\x94', 
		'\x98', '\x5', '\x10', '\t', '\x2', '\x95', '\x97', '\x5', '\x14', '\v', 
		'\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9D', '\x5', 
		'\x16', '\f', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\a', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\x6', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x1E', '\x2', '\x2', '\xA1', 
		'\xA2', '\x5', '\x18', '\r', '\x2', '\xA2', '\xA3', '\a', '\x1F', '\x2', 
		'\x2', '\xA3', '\xA4', '\x5', '\x10', '\t', '\x2', '\xA4', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\a', '\x2', '\x2', '\xA6', 
		'\xA7', '\x5', '\x10', '\t', '\x2', '\xA7', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\b', '\r', '\x1', '\x2', '\xA9', '\xC0', '\a', 
		'\x33', '\x2', '\x2', '\xAA', '\xC0', '\a', '\x32', '\x2', '\x2', '\xAB', 
		'\xC0', '\a', '\x11', '\x2', '\x2', '\xAC', '\xC0', '\a', '\x12', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '\x1E', '\x2', '\x2', '\xAE', '\xAF', '\x5', 
		'\x18', '\r', '\x2', '\xAF', '\xB0', '\a', '\x1F', '\x2', '\x2', '\xB0', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xC0', '\x5', '\x1A', '\xE', 
		'\x2', '\xB2', '\xB3', '\a', '\x18', '\x2', '\x2', '\xB3', '\xC0', '\x5', 
		'\x18', '\r', '\x12', '\xB4', '\xB5', '\a', '$', '\x2', '\x2', '\xB5', 
		'\xC0', '\x5', '\x18', '\r', '\x11', '\xB6', '\xC0', '\x5', ' ', '\x11', 
		'\x2', '\xB7', '\xC0', '\x5', ',', '\x17', '\x2', '\xB8', '\xC0', '\x5', 
		'\xE', '\b', '\x2', '\xB9', '\xBA', '\a', '\x32', '\x2', '\x2', '\xBA', 
		'\xC0', '\t', '\x2', '\x2', '\x2', '\xBB', '\xC0', '\a', '\x31', '\x2', 
		'\x2', '\xBC', '\xC0', '\a', '\x34', '\x2', '\x2', '\xBD', '\xC0', '\x5', 
		'(', '\x15', '\x2', '\xBE', '\xC0', '\x5', '\x6', '\x4', '\x2', '\xBF', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\f', '\xE', '\x2', '\x2', '\xC2', '\xC3', '\t', 
		'\x3', '\x2', '\x2', '\xC3', '\xD4', '\x5', '\x18', '\r', '\xF', '\xC4', 
		'\xC5', '\f', '\r', '\x2', '\x2', '\xC5', '\xC6', '\t', '\x4', '\x2', 
		'\x2', '\xC6', '\xD4', '\x5', '\x18', '\r', '\xE', '\xC7', '\xC8', '\f', 
		'\f', '\x2', '\x2', '\xC8', '\xC9', '\t', '\x5', '\x2', '\x2', '\xC9', 
		'\xD4', '\x5', '\x18', '\r', '\r', '\xCA', '\xCB', '\f', '\v', '\x2', 
		'\x2', '\xCB', '\xCC', '\t', '\x6', '\x2', '\x2', '\xCC', '\xD4', '\x5', 
		'\x18', '\r', '\f', '\xCD', '\xCE', '\f', '\n', '\x2', '\x2', '\xCE', 
		'\xCF', '\a', '!', '\x2', '\x2', '\xCF', '\xD4', '\x5', '\x18', '\r', 
		'\v', '\xD0', '\xD1', '\f', '\t', '\x2', '\x2', '\xD1', '\xD2', '\a', 
		'#', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x18', '\r', '\n', '\xD3', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\b', '\x2', 
		'\x2', '\xD9', '\xDB', '\a', '\x1E', '\x2', '\x2', '\xDA', '\xDC', '\x5', 
		'\x1C', '\xF', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\a', '\x1F', '\x2', '\x2', '\xDE', '\xE2', '\a', 
		'\x4', '\x2', '\x2', '\xDF', '\xE1', '\x5', '\x4', '\x3', '\x2', '\xE0', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x5', '\x2', 
		'\x2', '\xE6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', 
		'\x13', '\x2', '\x2', '\xE8', '\xEE', '\a', '\x32', '\x2', '\x2', '\xE9', 
		'\xEA', '\a', '\t', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x13', '\x2', 
		'\x2', '\xEB', '\xED', '\a', '\x32', '\x2', '\x2', '\xEC', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF3', '\a', '\n', '\x2', '\x2', '\xF2', 
		'\xF4', '\x5', '\x18', '\r', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x6', '\x4', '\x2', '\xF6', 
		'\xF8', '\a', '\x1E', '\x2', '\x2', '\xF7', '\xF9', '\x5', '\"', '\x12', 
		'\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\a', '\x1F', '\x2', '\x2', '\xFB', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\x101', '\x5', '\x18', '\r', '\x2', '\xFD', '\xFE', '\a', 
		'\t', '\x2', '\x2', '\xFE', '\x100', '\x5', '\x18', '\r', '\x2', '\xFF', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x10B', '\a', 
		'\x4', '\x2', '\x2', '\x105', '\x107', '\x5', '&', '\x14', '\x2', '\x106', 
		'\x108', '\a', '\t', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\a', '\x5', '\x2', '\x2', '\x10F', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\x32', '\x2', '\x2', '\x111', 
		'\x115', '\a', '\v', '\x2', '\x2', '\x112', '\x116', '\x5', '\x18', '\r', 
		'\x2', '\x113', '\x116', '\x5', '$', '\x13', '\x2', '\x114', '\x116', 
		'\x5', ',', '\x17', '\x2', '\x115', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\'', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x11C', '\x5', '*', '\x16', '\x2', '\x118', '\x119', '\a', ' ', '\x2', 
		'\x2', '\x119', '\x11B', '\x5', '*', '\x16', '\x2', '\x11A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', ')', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x121', '\a', '\x32', '\x2', 
		'\x2', '\x120', '\x122', '\x5', '.', '\x18', '\x2', '\x121', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '+', '\x3', '\x2', '\x2', '\x2', '\x123', '\x125', '\a', '/', 
		'\x2', '\x2', '\x124', '\x126', '\x5', '\"', '\x12', '\x2', '\x125', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\a', 
		'\x30', '\x2', '\x2', '\x128', '-', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\a', '/', '\x2', '\x2', '\x12A', '\x12B', '\x5', '\x18', '\r', 
		'\x2', '\x12B', '\x12C', '\a', '\x30', '\x2', '\x2', '\x12C', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '\f', '\x2', '\x2', '\x12E', 
		'\x12F', '\a', '\x1E', '\x2', '\x2', '\x12F', '\x130', '\a', '\x13', '\x2', 
		'\x2', '\x130', '\x131', '\a', '\x32', '\x2', '\x2', '\x131', '\x132', 
		'\a', '\x14', '\x2', '\x2', '\x132', '\x133', '\x5', '\x18', '\r', '\x2', 
		'\x133', '\x134', '\a', '\x3', '\x2', '\x2', '\x134', '\x135', '\a', '\x32', 
		'\x2', '\x2', '\x135', '\x136', '\t', '\a', '\x2', '\x2', '\x136', '\x137', 
		'\x5', '\x18', '\r', '\x2', '\x137', '\x13A', '\a', '\x3', '\x2', '\x2', 
		'\x138', '\x13B', '\x5', '\f', '\a', '\x2', '\x139', '\x13B', '\x5', '\xE', 
		'\b', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\a', '\x1F', '\x2', '\x2', '\x13D', '\x13E', '\x5', 
		'\x10', '\t', '\x2', '\x13E', '\x31', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\a', '\r', '\x2', '\x2', '\x140', '\x141', '\a', '\x1E', '\x2', 
		'\x2', '\x141', '\x142', '\x5', '\x18', '\r', '\x2', '\x142', '\x143', 
		'\a', '\x1F', '\x2', '\x2', '\x143', '\x144', '\x5', '\x10', '\t', '\x2', 
		'\x144', '\x33', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', '\xE', 
		'\x2', '\x2', '\x146', '\x147', '\a', '\x1E', '\x2', '\x2', '\x147', '\x148', 
		'\a', '\x13', '\x2', '\x2', '\x148', '\x149', '\a', '\x32', '\x2', '\x2', 
		'\x149', '\x14A', '\a', '\xF', '\x2', '\x2', '\x14A', '\x14B', '\x5', 
		'\x6', '\x4', '\x2', '\x14B', '\x14C', '\a', '\x1F', '\x2', '\x2', '\x14C', 
		'\x14D', '\x5', '\x10', '\t', '\x2', '\x14D', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\a', '\x10', '\x2', '\x2', '\x14F', '\x150', 
		'\x5', '\x10', '\t', '\x2', '\x150', '\x151', '\a', '\r', '\x2', '\x2', 
		'\x151', '\x152', '\a', '\x1E', '\x2', '\x2', '\x152', '\x153', '\x5', 
		'\x18', '\r', '\x2', '\x153', '\x154', '\a', '\x1F', '\x2', '\x2', '\x154', 
		'\x37', '\x3', '\x2', '\x2', '\x2', ' ', ':', '<', 'G', 'O', 'S', 'X', 
		'^', '`', 'g', '}', '\x89', '\x8E', '\x98', '\x9C', '\xBF', '\xD3', '\xD5', 
		'\xDB', '\xE2', '\xEE', '\xF3', '\xF8', '\x101', '\x107', '\x10B', '\x115', 
		'\x11C', '\x121', '\x125', '\x13A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
